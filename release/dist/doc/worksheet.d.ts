export default Worksheet;
declare class Worksheet {
    constructor(options: any);
    id: any;
    orderNo: any;
    name: any;
    state: any;
    _rows: any[];
    _columns: any[] | Column[];
    _keys: {};
    _merges: {};
    rowBreaks: any[];
    _workbook: any;
    properties: any;
    pageSetup: any;
    headerFooter: any;
    dataValidations: DataValidations;
    views: any;
    autoFilter: any;
    _media: any[];
    sheetProtection: any;
    tables: {};
    conditionalFormattings: any[];
    get workbook(): any;
    destroy(): void;
    get dimensions(): Range;
    set columns(arg: any[] | Column[]);
    get columns(): any[] | Column[];
    _headerRowCount: any;
    getColumnKey(key: any): any;
    setColumnKey(key: any, value: any): void;
    deleteColumnKey(key: any): void;
    eachColumnKey(f: any): void;
    getColumn(c: any): any;
    spliceColumns(start: any, count: any, ...inserts: any[]): void;
    get lastColumn(): any;
    get columnCount(): number;
    get actualColumnCount(): number;
    _commitRow(): void;
    get _lastRowNumber(): number;
    get _nextRow(): number;
    get lastRow(): any;
    findRow(r: any): any;
    findRows(start: any, length: any): any[];
    get rowCount(): number;
    get actualRowCount(): number;
    getRow(r: any): any;
    getRows(start: any, length: any): any[];
    addRow(value: any, style?: string): any;
    addRows(value: any, style?: string): any[];
    insertRow(pos: any, value: any, style?: string): any;
    insertRows(pos: any, values: any, style?: string): any[];
    _setStyleOption(pos: any, style?: string): void;
    _copyStyle(src: any, dest: any, styleEmpty?: boolean): void;
    duplicateRow(rowNum: any, count: any, insert?: boolean): void;
    spliceRows(start: any, count: any, ...inserts: any[]): void;
    eachRow(options: any, iteratee: any): void;
    getSheetValues(): any[];
    findCell(r: any, c: any): any;
    getCell(r: any, c: any): any;
    mergeCells(...cells: any[]): void;
    mergeCellsWithoutStyle(...cells: any[]): void;
    _mergeCellsInternal(dimensions: any, ignoreStyle: any): void;
    _unMergeMaster(master: any): void;
    get hasMerges(): boolean;
    unMergeCells(...cells: any[]): void;
    fillFormula(range: any, formula: any, results: any, shareType?: string): void;
    addImage(imageId: any, range: any): void;
    getImages(): any[];
    addBackgroundImage(imageId: any): void;
    getBackgroundImageId(): any;
    protect(password: any, options: any): Promise<any>;
    unprotect(): void;
    addTable(model: any): Table;
    getTable(name: any): any;
    removeTable(name: any): void;
    getTables(): any[];
    addConditionalFormatting(cf: any): void;
    removeConditionalFormatting(filter: any): void;
    set tabColor(arg: any);
    get tabColor(): any;
    set model(arg: any);
    get model(): any;
    _parseRows(model: any): void;
    _parseMergeCells(model: any): void;
}
import Column from "./column.js";
import DataValidations from "./data-validations.js";
import Range from "./range.js";
import Table from "./table.js";
